void pruebaDispersi√≥n() {
    char *claves[] = {"ANA", "JOSE", "OLGA", "MARIA"};
    int tamTabla = 10;
    for (int i = 0; i < 4; i++) {
        char *clave = claves[i];
        unsigned int resultadoA = dispersionA(clave, tamTabla);
        unsigned int resultadoN = ndispersion(clave, tamTabla);
        printf("Clave: %s, dispersionA: %u, ndispersion: %u\n", clave, resultadoA, resultadoN);
    }
}


void test_tabla_cerrada_lineal() {
    tabla_cerrada diccionario;
    int colisiones = 0;
    inicializar_cerrada(&diccionario, 11);

    insertar_cerrada("ANA", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);
    insertar_cerrada("JOSE", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);
    insertar_cerrada("OLGA", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);
    insertar_cerrada("ROSA", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);
    insertar_cerrada("LUIS", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);
    insertar_cerrada("IVAN", "", &diccionario, 11, dispersionA, resol_colisiones_lineal);

    printf("***TABLA CERRADA LINEAL\n{");
    for (int i = 0; i < 11; i++) {
        if (diccionario[i].ocupada) {
            printf("%d- (%s )\n", i, diccionario[i].clave);
        } else {
            printf("%d- \n", i);
        }
    }
    printf("}\n");

    printf("Numero total de colisiones al insertar los elementos: %d\n", colisiones);

    char *claves[] = {"ANA", "LUIS", "JOSE", "OLGA", "ROSA", "IVAN", "CARLOS"};
    for (int i = 0; i < 7; i++) {
        int colisiones_busqueda = 0;
        pos p = buscar_cerrada(claves[i], diccionario, 11, &colisiones_busqueda, dispersionA, resol_colisiones_lineal);
        if (p != -1) {
            printf("Al buscar: %s, encuentro: %s, colisiones: %d\n", claves[i], diccionario[p].clave, colisiones_busqueda);
        } else {
            printf("No encuentro: %s, colisiones: %d\n", claves[i], colisiones_busqueda);
        }
    }

    free(diccionario);
}

void test_tabla_cerrada_cuadratica() {
    tabla_cerrada diccionario;
    int colisiones = 0;
    inicializar_cerrada(&diccionario, 11);

    insertar_cerrada("ANA", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);
    insertar_cerrada("JOSE", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);
    insertar_cerrada("OLGA", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);
    insertar_cerrada("ROSA", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);
    insertar_cerrada("LUIS", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);
    insertar_cerrada("IVAN", "", &diccionario, 11, dispersionA, resol_colisiones_cuadratica);

    printf("***TABLA CERRADA CUADRATICA\n{");
    for (int i = 0; i < 11; i++) {
        if (diccionario[i].ocupada) {
            printf("%d- (%s )\n", i, diccionario[i].clave);
        } else {
            printf("%d- \n", i);
        }
    }
    printf("}\n");

    printf("Numero total de colisiones al insertar los elementos: %d\n", colisiones);

    char *claves[] = {"ANA", "LUIS", "JOSE", "OLGA", "ROSA", "IVAN", "CARLOS"};
    for (int i = 0; i < 7; i++) {
        int colisiones_busqueda = 0;
        pos p = buscar_cerrada(claves[i], diccionario, 11, &colisiones_busqueda, dispersionA, resol_colisiones_cuadratica);
        if (p != -1) {
            printf("Al buscar: %s, encuentro: %s, colisiones: %d\n", claves[i], diccionario[p].clave, colisiones_busqueda);
        } else {
            printf("No encuentro: %s, colisiones: %d\n", claves[i], colisiones_busqueda);
        }
    }

    free(diccionario);
}

void dispersion_resol(char *filename, unsigned int (*dispersion)(char *, int), unsigned int (*resol_colisiones)(int pos_ini, int num_intento), const char *dispersion_name, const char *resol_name){
    tabla_cerrada diccionario;
    int colisiones = 0;
    inicializar_cerrada(&diccionario, TAM_TABLA);
    leer_datos(filename, diccionario, TAM_TABLA, &colisiones, dispersion, resol_colisiones);    
    printf("Colisiones con %s y %s: %d\n", dispersion_name, resol_name, colisiones);    
    mostrar_cerrada(diccionario, TAM_TABLA);
    free(diccionario);
}
